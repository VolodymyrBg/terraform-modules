#!/bin/sh
eks_login() {
	local count=0
	echo '--> Waiting for EKS to be ready...' >&2
	while [ $count -lt 3 ]; do
		aws eks update-kubeconfig --name "$CLUSTER_NAME" && kubectl cluster-info
		if [ $? -eq 0 ]; then
			break
		fi
		sleep 10
		count=$((count+1))
	done
}

obtain_aws_account_id() {
	aws sts get-caller-identity | jq .Account -r
}

create_aws_sa() {
	local aws_account_id
	aws_account_id=$(obtain_aws_account_id) || return 1
	kubectl -n kube-system create sa aws-load-balancer-controller
	kubectl -n kube-system annotate sa/aws-load-balancer-controller eks.amazonaws.com/role-arn=arn:aws:iam::${aws_account_id}:role/${CLUSTER_NAME}-aws-load-balancer-controller
}

install_alb_chart() {
	helm repo add eks https://aws.github.io/eks-charts
	helm repo update eks
	helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
		-n kube-system \
		--set clusterName=$CLUSTER_NAME \
		--set serviceAccount.create=false \
		--set serviceAccount.name=aws-load-balancer-controller
}

install_crd_target_group_bindings() {
	kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master"
}

verify() {
	local count=0
	local result
	kubectl -n kube-system rollout restart deployment aws-load-balancer-controller
	echo '--> Waiting for load balancer controller to be ready...' >&2
	while [ $count -lt 3 ]; do
		result=$(kubectl -n kube-system get po -l app.kubernetes.io/name=aws-load-balancer-controller)
		if echo "$result" | grep -q "Running"; then
			break
		fi
		sleep 10
		count=$((count+1))
	done
}

main() {
	export CLUSTER_NAME=$1; shift

	eks_login \
	&& create_aws_sa \
	&& install_alb_chart \
	&& install_crd_target_group_bindings \
	&& verify
}

main "$@"

